<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.buildlackey</groupId>
    <artifactId>esper-and-kafka-spout-example</artifactId>
    <name>kafka-input-spout-with-kafka-output-bolt-and-esper-bolt-example</name>
    <version>1.0</version>
    <packaging>jar</packaging>
    <description>Example Illustrating a Kafka Consumer Spout, a Kafka Producer Bolt, and an Esper Streaming Query Bolt
    </description>
    <developers>
        <developer>
            <id>leadLackey</id>
            <name>Chris Bedford</name>
        </developer>
    </developers>


    <dependencies>

        <dependency>
            <groupId>com.restfb</groupId>
            <artifactId>restfb</artifactId>
            <version>1.6.12</version>
        </dependency>

        <dependency>
            <groupId>org.twitter4j</groupId>
            <artifactId>twitter4j-core</artifactId>
            <version>[3.0,)</version>
        </dependency>

        <dependency>
            <groupId>com.aliasi</groupId>
            <artifactId>lingpipe</artifactId>
            <version>4.0.1</version>
        </dependency>

        <dependency>
            <groupId>org.twitter4j</groupId>
            <artifactId>twitter4j-stream</artifactId>
            <version>[3.0,)</version>
        </dependency>

        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>1.7.1</version>
        </dependency>

        <!--  using  0.9.0-rc2 Storm because there seems to be source code available for that -->
        <dependency>
            <groupId>storm</groupId>
            <artifactId>storm</artifactId>
            <version>0.9.0-rc2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>storm</groupId>
            <artifactId>storm-core</artifactId>
            <version>0.9.0-rc2</version>
            <scope>provided</scope>
        </dependency>


        <!--  Including src jars for kafka spout for debugging. can remove these if we enable the dependency below -->

        <!-- this component below seems  to depend on
             org.apache.kafka:kafka_2.10:jar:0.8.0-beta1, which can't be found,
             I therefore put in the exclude marked as  EXCLUDE UNRESOLVABLE SCALA.

             In order to satisfy storm-kafka's need for scala I found that the SCALA
             version marked with INCLUDE SUBSTITUTE SCALA seems to do the trick.
        -->
        <dependency>
            <groupId>org.clojars.brenden</groupId>
            <artifactId>storm-kafka-0.8-plus</artifactId>
            <version>0.1.3-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.kafka</groupId>
                    <artifactId>kafka_2.10</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>org.scala-lang</groupId>
                    <artifactId>scala-library</artifactId>
                </exclusion>

            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>2.9.3</version>
        </dependency>


        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.9.2</artifactId>
            <version>0.8.0-beta1</version>
            <exclusions>
                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>

            </exclusions>


        </dependency>


        <!--
            stuff required by in-memory kafka server instance,
            not sure why not included via transitive dependencies
        -->
        <dependency>
            <groupId>com.yammer.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>2.2.0</version>

            <exclusions>
                <exclusion>
                    <groupId>slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>

            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.11</version>
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>

            </exclusions>
        </dependency>
        <dependency>
            <groupId>net.sf.jopt-simple</groupId>
            <artifactId>jopt-simple</artifactId>
            <version>4.5</version>
        </dependency>

        <!--
            3.3.3 seems to be required to run with storm, whereas 3.4.1 is required to run
            TestKafkaProducer.java in the 'kafka' project'
        -->
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.3.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>

                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <!-- Storm/Esper bolt support -->

        <dependency>
            <groupId>org.tomdz.storm</groupId>
            <artifactId>storm-esper</artifactId>
            <version>0.8.1-SNAPSHOT</version>
        </dependency>


        <!-- testing dependencies -->

        <dependency>
            <groupId>com.netflix.curator</groupId>
            <artifactId>curator-test</artifactId>
            <version>1.2.5</version>

            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.1.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <prerequisites>
        <maven>2.2.1</maven>
    </prerequisites>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.1.1</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>2.2.1</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.7</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <id>create-source-jar</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Use maven assembly to keep storm .jars out of the .jar. It is surprising that we need
                to do this because the storm .jar dependencies are included using 'provided' scope.
                But this seems to be necessary. Unfortunately it is not sufficient to do this because of
                the pesky slf4j .jars which are even more clingy (for details: see groovy script, defined below)
            -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptor>
                        src/main/assembly/dep.xml
                    </descriptor>
                    <archive>
                        <manifest>
                            <mainClass>EsperFilteredTwitterFeedTopology</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <!--
                Post-process the .jar created by maven assembly to remove the pesky slf4j classes that
                seem to cling to the .jar no matter what we tried to filter them out.  This step is our sledge hammer.
            -->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                File targetDir = new File("${project.basedir.path}/target".toString())
                                println "dir is ${targetDir.path}"
                                String jarBaseName = "${project.artifactId}-${project.version}"
                                File jarWithUnwantedStuff = new File(targetDir, "${jarBaseName}-jar.jar".toString())

                                def explodedJarDir = new File(targetDir, "explodedJar".toString())
                                def ant = new AntBuilder()   // create an antbuilder
                                ant.unzip(src: "${jarWithUnwantedStuff.path}",
                                        dest: explodedJarDir.path,
                                        overwrite: "false")
                                File finalJar = new File(targetDir, "${jarBaseName}-deployable.jar")
                                unwantedClassesDir = new File(explodedJarDir, "/org/slf4j/impl".toString())
                                unwantedClassesDir.deleteDir()
                                ant.zip(basedir: explodedJarDir.path, destFile: finalJar.path)
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>clojars</id>
            <url>http://clojars.org/repo/</url>
        </repository>
    </repositories>

</project>
